scopeName: source.HexParse
patterns:
- include: '#INIT'
repository:
  INIT:
    patterns:
    - match: //.*$
      name: comment.line
    - begin: /\*
      end: \*/
      name: comment.multiline
    - match: "\".*?\""
      name: string.literal.quotes
    - begin: \[
      beginCaptures:
        '0':
          name: keyword.control.nested.left
      end: \]
      endCaptures:
        '0':
          name: keyword.control.nested.right
      name: nested.list
      patterns:
      - include: '#INIT'
    - begin: \(
      beginCaptures:
        '0':
          name: keyword.control.paren.left
      end: \)
      endCaptures:
        '0':
          name: keyword.control.paren.right
      name: paren.list
      patterns:
      - include: '#INIT'
    - match: '\[|\]|\(|\)'
      name: invalid.single.paren
    - include: '#CUTTER'
  CUTTER:
    patterns:
    - name: code_cutter
      match: \\|[\w./\-:\u0100-\uffff]+
      captures:
        "0":
          patterns:
          - include: '#comment_iota'
          - include: '#literal'
          - include: '#special_handler'
          - include: '#pattern'
  comment_iota:
    patterns:
    - match: comment_.*
      name: comment.iota
    - match: tab(_.*)?
      name: comment.iota.tab
  literal:
    patterns:
    - match: \\|escape$
      name: constant.character.escape
    - match: str_.*$
      name: string.literal
    - match: entity_[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      name: entity.name.type.entity
    - include: '#inner_literal'
  inner_literal:
    patterns:
    - match: ([Mm][Yy])?[Ss][Ee][Ll][Ff]
      name: entity.name.type.myself
    - include: '#num'
  num:
    patterns:
    - match: '[0-9.\-]+(e[0-9.\-]+)?'
      name: constant.numeric
  pattern:
    patterns:
    - match: (if|eval(/cc)?|for_each|halt|del|hermes|thoth|iris)$
      name: keyword.control.meta
    - match: num(_[0-9e.\-]+)?$
      name: keyword.num.pattern
      captures:
        "0":
          patterns:
          - include: '#num'
    - match: mask_[-v]+$
      name: keyword.mask
    - match: .+$
      name: variable.pattern
  special_handler:
    patterns:
    - match: vec(_[0-9e.\-]+){0,3}$
      name: keyword.vector.literal
      captures:
        "0":
          patterns:
          - include: '#num'
    - match: gate(_.+){0,4}$
      name: keyword.gate.literal
      captures:
        "0":
          patterns:
          - include: '#inner_literal'
    - match: type(/(iota|entity|block|item))?_(.*)$
      name: keyword.type.literal
      captures:
        "3":
          name: entity.name.namespace.typeid
