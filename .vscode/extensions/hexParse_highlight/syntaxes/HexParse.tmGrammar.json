{
    "scopeName": "source.HexParse",
    "patterns": [
        {
            "include": "#TOTAL"
        }
    ],
    "repository": {
        "TOTAL": {
            "patterns": [
                {
                    "name": "comment.line",
                    "match": "//.*$"
                },
                {
                    "name": "comment.multiline",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "nested.list",
                    "begin": "\\[",
                    "end": "\\]",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.nested.left"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.nested.right"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#TOTAL"
                        }
                    ]
                },
                {
                    "include": "#comment_iota"
                },
                {
                    "include": "#special_handler"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#pattern"
                }
            ]
        },
        "comment_iota": {
            "patterns": [
                {
                    "name": "comment.iota",
                    "match": "comment_.*?(?![\\w:/\\.\\-])"
                },
                {
                    "name": "comment.iota.tab",
                    "match": "tab(_.*?(?![\\w:/\\.\\-]))?"
                }
            ]
        },
        "special_handler": {
            "patterns": [
                {
                    "name": "keyword.vector.literal",
                    "begin": "vec(?=(_[0-9e.\\-]+){0,3}(?![\\w:/\\.\\-]))",
                    "end": "(?![\\w:/\\.\\-])",
                    "patterns": [
                        {
                            "include": "#num"
                        }
                    ]
                },
                {
                    "name": "keyword.num.pattern",
                    "begin": "num(?=(_[0-9e.\\-]+)?(?![\\w:/\\.\\-]))",
                    "end": "(?![\\w:/\\.\\-])",
                    "patterns": [
                        {
                            "include": "#num"
                        }
                    ]
                },
                {
                    "name": "keyword.mask",
                    "match": "mask_[-v]+"
                }
            ]
        },
        "literal": {
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\"
                },
                {
                    "name": "string.literal",
                    "match": "str_[\\w:/\\.\\-]+"
                },
                {
                    "name": "entity.name.type.class.myself",
                    "match": "(?<![\\w:/\\.\\-])(([Mm][Yy])?[Ss][Ee][Ll][Ff])(?![\\w:/\\.\\-])"
                },
                {
                    "name": "constant.numeric.literal",
                    "match": "(?<![\\w:/\\.\\-])[0-9.\\-]+(e[0-9.\\-]+)?(?![\\w:/\\.\\-])"
                }
            ]
        },
        "pattern": {
            "patterns": [
                {
                    "name": "paren.list",
                    "begin": "\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.paren.left"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.paren.right"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#TOTAL"
                        }
                    ]
                },
                {
                    "name": "keyword.control.meta",
                    "match": "(?<![\\w:/\\.\\-])(if|eval(/cc)?|for_each|halt)(?![\\w:/\\.\\-])"
                },
                {
                    "name": "variable.pattern",
                    "match": "[\\w:/\\.\\-]+"
                }
            ]
        },
        "num": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "[0-9.\\-]+(e[0-9.\\-]+)?"
                }
            ]
        }
    }
}